{% extends "@quick_coding.view/layout/base.html.twig" %}

{% block title %} {{ config.title }} {% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="{{ asset(quick_coding.public ~ "plugins/datatables/dataTables.uikit.min.css") }}" />
{% endblock %}

{% block javascripts %}
<script src="{{ asset(quick_coding.public ~ "plugins/datatables/jquery.dataTables.min.js") }}"></script>
<script src="{{ asset(quick_coding.public ~ "plugins/datatables/dataTables.uikit.min.js") }}"></script>
<script>
$(document).ready(function(){
	{% set select = [] %}
	{% set orders = [] %}
	{% set columns = [] %}
	{% for key, name in config.view.select|keys %}
	    {% set select = select|merge({(name): key}) %}
	    {% set columns = columns|merge([(config.view.select[name]|replace({' ': ""}))]) %}
	{% endfor %}
	{% for key, order in config.view.orders %}
	    {% set orders = select[key] is defined ? orders|merge([(select[key]), order]) : orders %}
	{% endfor %}
	var orders = {{ orders|json_encode|raw }};
	var columns = {{ columns|json_encode|raw }};

	columns = columns.map(el => {
		return {
			data: el, 
			defaultContent: '-', 
			render: function ( data, type, row ) {
	        	if(Array.isArray(data)){
	            	return (data.map(v => v ? `<span class="uk-label uk-label-success uk-border-rounded item-datatables">${v}</span>` : '')).join('');
	            }

	            var d = new Date(data);
	            if(data && d instanceof Date && !isNaN(d) && d.getTime() != data){
		            var isT = data.substr(10,1) == "T";
					if(isT){
						return d.toLocaleString('en', { dateStyle : 'medium', timeStyle: 'short', timeZone: 'UTC' });
						//return date.toLocaleDateString('en', { dateStyle : 'medium', timeZone: 'UTC' });
		            	//return date.toLocaleTimeString('en', { timeStyle: 'short', timeZone: 'UTC' });
					}
	            }

	            if (typeof data === 'string' || data instanceof String){
	            	return data.replace(/(?:\r\n|\r|\n)/g, '<br>');
	            }
		        
	            return data;
	        }
        };
	});

	columns.push({
		data: "quick_coding_actions", 
		width:110, 
		orderable:false, 
		defaultContent: `
        	<button type="button" class="uk-button uk-button-secondary uk-border-rounded uk-button-small qc-btn-action qc-view">
        		<span uk-icon="icon: file-text"></span>
        	</button>
        	{%- if (config.ACL.update|length) == 0 or is_granted(config.ACL.update) -%}
        	<button type="button" class="uk-button uk-button-primary uk-border-rounded uk-button-small qc-btn-action qc-edit">
    			<span uk-icon="icon: file-edit"></span>
    		</button>
    		{%- endif -%}
    		{%- if (config.ACL.delete|length) == 0 or is_granted(config.ACL.delete) -%}
    		<button type="button" class="uk-button uk-button-danger uk-border-rounded uk-button-small qc-btn-action qc-delete">
    			<span uk-icon="icon: minus-circle"></span>
    		</button>
    		{%- endif -%}
	`});
	var delID = null;
	var table = $("#qc-table-datatables").DataTable({
		order: [orders.length ? orders : [0, 'Asc']],
        processing: true,
        serverSide: true,
        pageLength: 25,
        orderMulti: true,
        ajax: {
            url: "{{ config.path.view is iterable ? path(config.path.view[0], config.path.view[1]) : path(config.path.view) }}",
            data: function(params) {params.type = "json";delete params.columns}
        },
        columns: columns,
        initComplete : function() {
            var input = $('.dataTables_filter input').unbind();
            var self = this.api();
            var $searchButton = $('<button>')
				.attr('class', 'uk-button uk-button-primary uk-button-small uk-border-rounded dt-btn-search')
       			.append('<span uk-icon="icon: search"></span> Search')
       			.click(function() {self.search(input.val()).draw()});

            $('.dataTables_filter input').on('search', function(e){
            	self.search(input.val()).draw();
            })
   			
            $('.dataTables_filter').append($searchButton);
        }
    });

	$("#qc-table-datatables tbody").on( "click", "td .qc-view", function(e){
		var row = table.row($(e.currentTarget).parents('tr')).data();
		var path = "{{ path(config.path.form, {action: 'read', id: '0000'}) }}";
		path = path.replace("0000", row.id);
		document.location = path;
	})

	$("#qc-table-datatables tbody").on( "click", "td .qc-edit", function(e){
		var row = table.row($(e.currentTarget).parents('tr')).data();
		var path = "{{ path(config.path.form, {action: 'update', id: '0000'}) }}";
		path = path.replace("0000", row.id);
		document.location = path;
	})

	$("#qc-table-datatables tbody").on( "click", "td .qc-delete", function(e){
		var row = table.row($(e.currentTarget).parents('tr')).data();
		UIkit.modal.confirm('Are you sure want to delete data {{ config.title }}?').then(function() {
			var path = "{{ path(config.path.remove, {action: 'delete', id: '0000'}) }}";
			path = path.replace("0000", row.id);
			$.get(path, function(data, status){
				if(status === 'success'){
					$("#qc-table-datatables").DataTable().ajax.reload();
				}
			});
		}, function(){});
	})
	
});
</script>
{% endblock %}

{% block actionbar %}
    {% include '@quick_coding.view/component/actionbar.twig' with {actionbar: config.actionbar} %}
{% endblock %}

{% block body %}
<div class="uk-card uk-card-default uk-border-rounded">
	<div class="uk-card-header uk-border-rounded">
		<h3><b>{{ config.title }}</b></h3>
	</div>
	<div class="uk-card-body uk-overflow-auto">
		<table id="qc-table-datatables" class="uk-table uk-table-hover uk-table-striped" style="width:100%">
            <thead>
                <tr>
                    {% for item in config.view.select %}
                    <th>{{ item }}</th>
                    {% endfor %}
                    <th class="data-action"></th>
                </tr>
            </thead>
        </table>
	</div>
</div>
{% endblock %}